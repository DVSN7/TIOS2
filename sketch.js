(function(_0x8de2be,_0x29b7bd){const _0x40245b=_0x5227,_0x2df75d=_0x8de2be();while(!![]){try{const _0x5e190b=parseInt(_0x40245b(0xac))/0x1*(parseInt(_0x40245b(0xc3))/0x2)+-parseInt(_0x40245b(0xb2))/0x3*(parseInt(_0x40245b(0xa1))/0x4)+parseInt(_0x40245b(0xba))/0x5*(-parseInt(_0x40245b(0xbc))/0x6)+parseInt(_0x40245b(0xab))/0x7*(-parseInt(_0x40245b(0xa9))/0x8)+-parseInt(_0x40245b(0xb7))/0x9+parseInt(_0x40245b(0xbd))/0xa+parseInt(_0x40245b(0xc1))/0xb;if(_0x5e190b===_0x29b7bd)break;else _0x2df75d['push'](_0x2df75d['shift']());}catch(_0x600d98){_0x2df75d['push'](_0x2df75d['shift']());}}}(_0x55da,0x36c12));function _0x55da(){const _0x215454=['u_paletteIndex1','u_rotationAngle','disable','u_paletteThreshold','random','setUniform','u_reactionInfluence','8JEZNEm','u_resolution','2754332AgxKSo','2vIwpSo','log','u_randomScaleSeed','length','Selected\x20rdParameterA:\x20','u_translation','1063128TBYKtE','STENCIL_TEST','u_noiseOffset','NoiseScale:\x20','u_cellSize','3528945RioWSY','u_rdParameterB','shader.vert','7780dFltBS','shader.frag','462WABkJS','2913010WZHlNa','u_flowSpeed',',\x20rdParameterB:\x20','u_noiseSeed','12931776JLbbPz','u_seed','17126qsnSAs','u_amplitude','u_time','4wjECTz'];_0x55da=function(){return _0x215454;};return _0x55da();}let theShader,cellSize=0x7,noiseScale,maxDepth,noiseSeed,flowSpeed=0.05,paletteIndex1,paletteIndex2,randomScaleSeed,rotationAngle,noiseOffsetX,noiseOffsetY,scaleFactor=0x1e,translateX=0x0,translateY=0x0,previousMouseX,previousMouseY,amplitudeValues=[0.1],reactionInfluence=0x2,rdParameters=[{'a':0.5,'b':0x1},{'a':0.1,'b':0.1},{'a':0.8,'b':0.2},{'a':0x1,'b':0x1},{'a':0.3,'b':0.7},{'a':1.2,'b':1.2},{'a':0.05,'b':0.9},{'a':0.7,'b':1.8},{'a':0.3,'b':0.3},{'a':0x1,'b':0x4}],paletteThreshold=0.25,freq,randomSeed,isAnimating=![],frameCounter=0x0;const maxFrames=0x64;let hasInitialAnimationRun=![],elapsedTime=0x0;function preload(){const _0x551280=_0x5227;theShader=loadShader(_0x551280(0xb9),_0x551280(0xbb));}function setup(){const _0x55496b=_0x5227,_0x5818fa=0x4/0x5;let _0x793bf3=windowWidth,_0x511cb1=windowWidth/_0x5818fa;_0x511cb1>windowHeight&&(_0x511cb1=windowHeight,_0x793bf3=windowHeight*_0x5818fa);createCanvas(_0x793bf3,_0x511cb1,WEBGL),randomSeed=Math[_0x55496b(0xa6)](),background(0x0),noStroke(),pixelDensity(0x2),shader(theShader),noiseOffsetX=random(0x7d0),noiseOffsetY=random(0x7d0);let _0x3f13d9=random(-0x7d0,0x7d0),_0x327472=random(-0x7d0,0x7d0);translate(_0x3f13d9,_0x327472),noiseSeed=random(0x3e8);let _0x6d3958=[0x3e8];maxDepth=random(_0x6d3958),paletteIndex1=int(random(0x22)),paletteIndex2=int(random(0x22));while(paletteIndex2===paletteIndex1){paletteIndex2=int(random(0x22));}randomScaleSeed=random(0x3e8);let _0x1f0eaf=[0x0,0x1e,0x3c,0x5a];rotationAngle=_0x1f0eaf[int(random(_0x1f0eaf[_0x55496b(0xaf)]))],freq=random([0.01,0.005,0.001]),console[_0x55496b(0xad)]('Frequency:\x20'+freq),noiseScale=random([0.00001,0.00004,0.0001]),console[_0x55496b(0xad)](_0x55496b(0xb5)+noiseScale);let _0x54e112=amplitudeValues[int(random(amplitudeValues['length']))],_0x15c6b9=rdParameters[int(random(rdParameters[_0x55496b(0xaf)]))];rdParameterA=_0x15c6b9['a'],rdParameterB=_0x15c6b9['b'],console['log'](_0x55496b(0xb0)+rdParameterA+_0x55496b(0xbf)+rdParameterB),theShader[_0x55496b(0xa7)](_0x55496b(0xaa),[width,height]),theShader[_0x55496b(0xa7)](_0x55496b(0xb6),cellSize),theShader[_0x55496b(0xa7)](_0x55496b(0xbe),flowSpeed),theShader[_0x55496b(0xa7)](_0x55496b(0xa2),paletteIndex1),theShader['setUniform']('u_paletteIndex2',paletteIndex2),theShader[_0x55496b(0xa7)](_0x55496b(0xc0),noiseSeed),theShader['setUniform'](_0x55496b(0xae),randomScaleSeed),theShader['setUniform'](_0x55496b(0xa3),radians(rotationAngle)),theShader['setUniform'](_0x55496b(0xb4),[noiseOffsetX,noiseOffsetY]),theShader['setUniform'](_0x55496b(0xc4),_0x54e112),theShader[_0x55496b(0xa7)]('u_maxDepth',maxDepth),theShader[_0x55496b(0xa7)](_0x55496b(0xa5),paletteThreshold),theShader[_0x55496b(0xa7)](_0x55496b(0xa8),reactionInfluence),theShader[_0x55496b(0xa7)]('u_rdParameterA',rdParameterA),theShader[_0x55496b(0xa7)](_0x55496b(0xb8),rdParameterB),theShader[_0x55496b(0xa7)](_0x55496b(0xc2),randomSeed),theShader['setUniform']('u_frequency',freq);const _0x55127c=this['_renderer']['GL'];_0x55127c['disable'](_0x55127c['DEPTH_TEST']),_0x55127c[_0x55496b(0xa4)](_0x55127c[_0x55496b(0xb3)]);}function draw(){const _0x17dfb1=_0x5227;if(!hasInitialAnimationRun)frameCounter++,elapsedTime=millis()/0x3e8,frameCounter>=maxFrames&&(hasInitialAnimationRun=!![]);else isAnimating&&(elapsedTime=millis()/0x3e8);keyIsDown(UP_ARROW)&&(scaleFactor+=0.1);keyIsDown(DOWN_ARROW)&&(scaleFactor-=0.1);scaleFactor=Math['round'](scaleFactor*0xa)/0xa,scaleFactor=constrain(scaleFactor,0.1,0x28);if(mouseIsPressed&&mouseButton===LEFT){if(previousMouseX!==undefined&&previousMouseY!==undefined){let _0x3ad6a6=mouseX-previousMouseX,_0x4ff6c2=mouseY-previousMouseY;translateX-=_0x3ad6a6*scaleFactor,translateY+=_0x4ff6c2*scaleFactor;}previousMouseX=mouseX,previousMouseY=mouseY;}else previousMouseX=undefined,previousMouseY=undefined;theShader[_0x17dfb1(0xa7)]('u_scaleFactor',scaleFactor),theShader['setUniform'](_0x17dfb1(0xb1),[translateX,translateY]),theShader[_0x17dfb1(0xa7)](_0x17dfb1(0xc5),elapsedTime),theShader[_0x17dfb1(0xa7)]('u_noiseScale',noiseScale),beginShape(),vertex(-0x1,-0x1,0x0,0x0,0x0),vertex(0x1,-0x1,0x0,0x1,0x0),vertex(0x1,0x1,0x0,0x1,0x1),vertex(-0x1,0x1,0x0,0x0,0x1),endShape(CLOSE);}function _0x5227(_0x5828a7,_0x2a0418){const _0x55dabe=_0x55da();return _0x5227=function(_0x522705,_0x6164c8){_0x522705=_0x522705-0xa1;let _0x3a785d=_0x55dabe[_0x522705];return _0x3a785d;},_0x5227(_0x5828a7,_0x2a0418);}function keyPressed(){const _0x288b16=_0x5227;if(key==='1')paletteThreshold=max(0x0,paletteThreshold-0.1);else{if(key==='2')paletteThreshold=min(0x1,paletteThreshold+0.1);else{if(key==='S'||key==='s')hasInitialAnimationRun&&(isAnimating=!isAnimating);else(key==='R'||key==='r')&&(translateX=0x0,translateY=0x0);}}theShader[_0x288b16(0xa7)](_0x288b16(0xa5),paletteThreshold);}function windowResized(){const _0x33cd7d=_0x5227,_0x4bd8ca=0x4/0x5;let _0x430003=windowWidth,_0x2d127a=windowWidth/_0x4bd8ca;_0x2d127a>windowHeight&&(_0x2d127a=windowHeight,_0x430003=windowHeight*_0x4bd8ca),resizeCanvas(_0x430003,_0x2d127a),theShader['setUniform'](_0x33cd7d(0xaa),[_0x430003,_0x2d127a]);}